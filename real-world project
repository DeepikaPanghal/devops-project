# DevOps Lifecycle Project: Scalable Container Platform

## Overview

This project simulates a real-world scenario where I was hired as a DevOps engineer at a product-based company (Analytics Pvt Ltd). The goal was to build a robust DevOps lifecycle using Docker, Kubernetes, Jenkins, and Terraform to automate deployment, scaling, and operations of containerized applications without modifying the Docker containers used in the testing environment.

## Tools Used
- **Docker** for containerization
- **Kubernetes** for orchestration and scaling
- **Jenkins** for CI/CD
- **Terraform** for infrastructure provisioning

## Scenario

> The organization experienced rapid growth in demand for their product and required a scalable deployment platform. The existing system followed a monolithic architecture with only 2 developers. My task was to implement a complete DevOps lifecycle enabling CI/CD, infrastructure-as-code, and container orchestration.

Full scenario details can be found in [docs/project-overview.md](docs/project-overview.md)

## How to Use

Instructions for running the project locally or deploying via Jenkins + Terraform...

How to Structure the Repository
Here's a recommended folder and file structure:

📁 devops-lifecycle-k8s-docker-terraform-jenkins/
├── README.md
├── docker/
│   └── Dockerfile/             # Sample Dockerized application
├── jenkins/
│   └── Jenkinsfile             # CI/CD pipeline configuration
├── kubernetes/
│   ├── deployment.yaml         # K8s Deployment config
│   ├── service.yaml            # Service definition
│   └── ingress.yaml            # Ingress (optional)
├── terraform/
│   └── main.tf                 # Infrastructure provisioning code







